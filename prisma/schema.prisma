// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model User {
  id                  String    @id
  name                String
  email               String
  emailVerified       Boolean   @default(false)
  image               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt
  sessions            Session[]
  accounts            Account[]

  workspacesOwned     Workspace[]
  workspacesMember    Workspace[]   @relation("WorkspaceMember")

  boardsOwned         Board[]
  cardsOwned          Card[]
  tasksOwned          Task[]

  @@unique([email])
  @@map("user")
}

model Workspace {
  id             String     @id @default(uuid()) 
  title          String     

  author         User       @relation(fields: [authorId], references: [id])
  authorId       String     

  members        User[]     @relation("WorkspaceMember")

  boards         Board[]
}

model Board {
  id             String       @id @default(uuid()) 
  title          String

  author         User         @relation(fields: [authorId], references: [id])
  authorId       String       

  workspace      Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String      
  card           Card[]
} 

model Card {
  id             String       @id @default(uuid()) 
  title          String       

  author         User         @relation(fields: [authorId], references: [id])
  authorId       String

  board          Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId        String 

  tasks          Task[]      
}

model Task {
  id             String       @id @default(uuid()) 
  title          String       

  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
  order          Int          @default(0)

  priority       Priority    
  dueDate        DateTime     

  card           Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId         String
  completed      Boolean   @default(false)  
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
